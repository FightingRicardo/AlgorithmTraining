Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:
Input: [1,3,5,6], 5
Output: 2

Example 2:
Input: [1,3,5,6], 2
Output: 1

Example 3:
Input: [1,3,5,6], 7
Output: 4

Example 4:
Input: [1,3,5,6], 0
Output: 0

Link: https://leetcode-cn.com/problems/search-insert-position
/******************************************************/

package LeetCode;

import java.util.Scanner;

public class SearchInsert {
	
	public int searchinsert (int[] nums, int target) {
		if (nums.length == 0)
			return -1;
		int i = 0;
		while(nums[i] != target) {
			if(i + 1 < nums.length) {
//				if((nums[i] > target && nums[i+1] < target) || (nums[i] < target && nums[i+1] > target) )
				if(nums[i] < target && nums[i+1] > target)
					return i + 1;
				else if(nums[i] > target && i == 0)
					return i;
				else
					i++;
			}
			else {
				if (nums[i] > target)//here, only the condition of one element is concluded
					return i;
				else
					return i + 1;
			}
		}
		return i;
	}
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int target = in.nextInt();
		
		int[] nums = {1,3,4,5,7,9};
		SearchInsert si = new SearchInsert();
		int index = si.searchinsert(nums, target);
		
		System.out.println(String.valueOf(index));

	}

}
