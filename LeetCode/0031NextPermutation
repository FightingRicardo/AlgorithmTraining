Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

Link: https://leetcode-cn.com/problems/next-permutation
/****************************************************************/
package LeetCode;

public class NextPermutation {

    public int[] nextPermutation(int[] nums) {
        if(nums.length < 1 || nums == null)
        	return nums;
        
        int i = nums.length - 1;
        while(i>=1) {
        	if(nums[i]<=nums[i-1])
        		i--;
        	else {
        		int head = nums[i-1];
        		int swapindex = search(nums, head, i);
        		swap(nums, i-1, swapindex);
        		reverse(nums, i, nums.length - 1);
        		break;
        	}
        }
        if(i==0)
        	reverse(nums, i, nums.length - 1);
        return nums;
    }
    
    private int search(int[] nums, int head, int headindex) {
    	int index = headindex;
    	while(index<nums.length) {
    		if(nums[index]<=head) {//2,3,2,0
    			index--; 
    			return index;
    		}
    		index++;
    	}
    	return --index;
    }
    
    private void swap(int[] nums, int a, int b) {
    	int tmp = nums[a];
    	nums[a] = nums[b];
    	nums[b] =tmp;  	
    }
    
    private void reverse(int[] nums, int L, int R) {
    	while(L<R){
    		swap(nums, L, R);
    		L++; R--;
    	}
    }
    
    static void prt(String s) {
    	System.out.print(s);
    }
    
	public static void main(String[] args) {
//		int[] nums = {4,2,0,2,3,2,0};
//		int[] nums = {1,0,7,9,8,6,4};
//		int[] nums = {3,2,1};
		int[] nums = {3,2,1,0,0};
		
		int[] newnums = new NextPermutation().nextPermutation(nums);
		prt("[");
		for(int num : newnums) {
			prt(String.valueOf(num)+",");
		}
		prt("]");
	}

}
