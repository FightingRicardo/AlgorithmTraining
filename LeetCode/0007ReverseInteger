Given a 32-bit signed integer, reverse digits of an integer.

Example 1:
Input: 123
Output: 321

Example 2:
Input: -123
Output: -321

Example 3:
Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Link: https://leetcode-cn.com/problems/reverse-integer
/*********************************************************/

package LeetCode;
import java.util.Scanner;

public class Reverse {//0007
	private int x;
    public int reverse(int org) {
    	this.x = org;
        int rev = 0;
        while (x != 0){
            int pop = x % 10;
            x /= 10;
            if(rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) {
            	System.out.println(String.valueOf(Integer.MAX_VALUE/10));
            	return 0;
            }
            if(rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 +pop;
        }
        return rev;
    	
//    	this.x = org;
//        int rev = 0;
//        while (x != 0){
//            int pop = x % 10;
//            x /= 10;
//            rev = rev * 10 + pop;    
////            try{
////                rev = rev * 10 + pop;               
////            }
////            catch(Exception e){
////                System.out.println("The result beyonds the range!");
////                return 0;
////            }
//        }
//        return rev;
    }
    
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int x = in.nextInt();
		Reverse rev = new Reverse();
		int result = rev.reverse(x);
		
		System.out.println(String.valueOf(result));
	}

}
