Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Link: https://leetcode-cn.com/problems/merge-two-sorted-lists
/****************************************************************/

package LeetCode;

public class LinkMerge {

    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
////        if(l1 == null) {
////            return l2;
////        }
////        if(l2 == null) {
////            return l1;
////        }
//		if(l1==null || l2==null) {
//			return (l1==null)? l2 : l1;
//		}
//		//author: user7439t
//		//Link: https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/die-dai-he-di-gui-ban-ben-dong-tai-tu-xiang-jie-by/
//
//		//solution 1:
//        if(l1.val < l2.val) {
//            l1.next = mergeTwoLists(l1.next, l2);
//            return l1;
//        } else {
//            l2.next = mergeTwoLists(l1, l2.next);
//            return l2;
//        }
    	
        //solution 2:
        ListNode prehead = new ListNode(-100000);
        ListNode flag = prehead;
        while(l1 != null && l2 != null){
        	if (l1.val <= l2.val) {
        		flag.next = l1;
        		l1 = l1.next;
        	}
        	else {
        		flag.next = l2;
        		l2 = l2.next;
        	}
        	flag = flag.next;//it is important, why this commmand could not be deleted?
        } 
        // exactly one of l1 and l2 can be non-null at this point, so connect
        // the non-null list to the end of the merged list.
        flag.next = l1 == null ? l2 : l1;//it is important, why it is flag.next rather than prehead.next?
        
        return prehead.next;        
    }
    
	public static void main(String[] args) {
		//how to instance a listnode: https://blog.csdn.net/o9109003234/article/details/84245783
		ListNode node1 = new ListNode(1);
		ListNode node2 = new ListNode(1);
		ListNode node3 = new ListNode(2);
		ListNode node4 = new ListNode(3);
		ListNode node5 = new ListNode(4);
		ListNode node6 = new ListNode(4);
		
		node1.next = node3;
		node3.next = node5;
		node2.next = node4;
		node4.next = node6;
		
		LinkMerge lm = new LinkMerge();
		ListNode mergeL = lm.mergeTwoLists(node1, node2);

	}
}
