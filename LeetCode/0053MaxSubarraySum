Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Link: https://leetcode-cn.com/problems/maximum-subarray
/*********************************************************/
package LeetCode;

public class Maxsubarray {

    public int maxSubArray(int[] nums) {
    	if(nums.length == 0 || nums == null)
    		return 0;
    	int sum = 0;//recorder of sum
    	int ans = 0;//recorder for the start
    	for(int num: nums) {
    		sum = (sum <= 0) ? num : sum+num;
    		ans = Math.max(ans, sum);
    	}    	
    	return ans;
    }
    
	public static void main(String[] args) {
		int[] nums = {-2,1,-3,4,-1,2,1,-5,4};
		
		Maxsubarray msa = new Maxsubarray();
		int sum = msa.maxSubArray(nums);
		
		System.out.println(String.valueOf(sum));

	}

}
