Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.

Example:
Input: [1,8,6,2,5,4,8,3,7]
Output: 49

Link：https://leetcode-cn.com/problems/container-with-most-water
/***********************************************************************/
package LeetCode;

public class MaxArea {

    public int solution1(int[] height) {
        if(height.length < 2 || height == null)
        	return 0;
    	
        int pre = 0, post = 1;
        int maxsize = 0;
        while(pre<height.length-1) {
        	while(post<height.length) {
        		int newsize = (Math.min(height[pre], height[post]))*(post-pre);
        		maxsize = Math.max(maxsize, newsize);
        		
        		post++;
        	}      	
        	pre++;
        	post = pre + 1;
        }
    	return maxsize;
    	//ac
    }
    
    public int solution2(int[] height) {
        if(height.length < 2 || height == null)
        	return 0;
    	
        int pre = 0, post = 1;
        int size = 0;
        int j=pre;//for the highest
        while(post<height.length) {   	        	
		int k = (height[pre+1]>height[pre])? (pre+1): pre;//for the next

		int snew = (Math.min(height[pre], height[post]))*(post-pre);
		int snext = (Math.min(height[k], height[post]))*(post-k);        	
		int shigh = (Math.min(height[j], height[post]))*(post-j);

		size = Math.max(size, Math.max(Math.max(snew,snext),shigh));

		if(size == snext && k != pre) {pre++;}
		if(size == shigh && j != pre) {pre=j;}

		j = (height[post]>height[j])? post: j;//for the highest

		post++;
        }
    	return size;
    }
    
	public int solution3(int[] height) {
		if(height.length<2 || height == null)
			return 0;
		
		int pre = 0;
		int post = height.length-1;
		int maxsize = 0;
		while(pre<post) {
			int newsize = Math.min(height[pre], height[post])*(post-pre);
			maxsize = Math.max(maxsize, newsize);
			if(height[pre]>height[post])
				post--;
			else
				pre++;
		}
		return maxsize;
	}
    
	public int solution4(int[] height) {
		if(height.length<2 || height == null)
			return 0;
		
		int pre = 0;
		int post = height.length-1;
		int maxsize = Math.min(height[pre], height[post])*(post-pre);
		while(pre<post) {
			int leftheight = Math.max(height[pre], height[pre+1]);
			pre = (height[pre]<height[pre+1])?(pre+1):pre;
			int rightheight = Math.max(height[post-1], height[post]);
			post = (height[post]<height[post-1])?(post-1):post;
			int newsize = Math.min(leftheight, rightheight)*(post-pre);
			
			maxsize = Math.max(maxsize, newsize);			
		}
		return maxsize;
	}
	static void prt(String s) {
		System.out.println(s);
	}
    
	public static void main(String[] args) {
		int[] height = {1,3,1,8,3,7,4,1,2};//{2,3,4,5,18,17,6};//{1,8,6,2,5,4,8,3,7};
		
		MaxArea ma = new MaxArea();
		int size = ma.solution4(height);

		prt(String.valueOf(size));
	}

}

