Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Link: https://leetcode-cn.com/problems/search-in-rotated-sorted-array
/**********************************************************************************
package LeetCode;

public class SearchRotationArray {

	public int solution(int[] nums, int target) {
		if(nums.length<1 || nums == null)
			return -1;

		int left = 0, right = nums.length - 1, mid = (left+right+1)>>1;
		int rotation = 0;
		int index;
		
		rotation = find_rotation(nums, left, right);
		
		if(target>=nums[0]&&target<=nums[rotation]) 
			index = binary_search(nums, 0, rotation, target);
		else
			index = binary_search(nums, rotation, nums.length-1, target);
		return index;
	}
	
	private int find_rotation(int[] nums, int left, int right) {
		if(nums[left]<nums[right])
			return 0;
		
		int rotation;
		int mid = (left+right+1)>>1;
		while(left<right) {
			if(nums[mid]<nums[mid-1])
				return mid - 1;
			else {
				if(nums[mid]<nums[left]) {
					right = mid - 1;
					mid = (left+right+1)>>1;
				}
				else {
					left = mid;
					mid = (left+right+1)>>1;
				}
			}
		}
		return 0;
	}
	
	private int binary_search(int[] nums, int left, int right, int target) {
		int index;
		int mid = (left+right+1)>>1;
		while(left<right) {
			if(nums[mid]==target)
				return index = mid;
			else if(nums[mid]>target) {
				right = mid-1;
				mid = (left+right+1)>>1;
			}
			else if(nums[mid]<target) {
				left = mid;
				mid = (left+right+1)>>1;
			}
		}
		return index=(target == nums[left])?left:-1;
	}
	
	public static void main(String[] args) {
		int[] nums={1,3};
		int target = 3;
		
		int index = new SearchRotationArray().solution(nums, target);
		System.out.print(String.valueOf(index));

	}

}
