Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Link: https://leetcode-cn.com/problems/two-sum
/**********************************************************/

class Solution {
    // public int[] twoSum(int[] nums, int target) {
    //     for(int i=0; i< nums.length; i++){
    //         for(int j=i+1; j< nums.length; j++){
    //             if(nums[i]+nums[j]==target){
    //                 return new int[] {i,j};
    //             }
    //         }
    //     }
    //     throw new IllegalArgumentException("No two sum solution");
    // }   

    // two HashMap, Time complexity: O(n), Space complexity: O(n)
    // public int[] twoSum(int[] nums, int target){
    //     HashMap<Integer,Integer> maps = new HashMap<Integer,Integer>();
    //     for(int i = 0; i < nums.length; i++){
    //         maps.put(nums[i],i);//pay attention, the one needed to be returned is the index
    //     }
    //     for(int i = 0; i < nums.length; i++){
    //         int complement = target - nums[i];
    //         if(maps.containsKey(complement) && maps.get(complement) != i){
    //             return new int[] {i, maps.get(complement)};//the later half in case 4+4=8
    //         }
    //     }
    //     throw new IllegalArgumentException("No two sum solution");
    // }

    //one HashMap, Time complexity: O(n), Space complexity: O(n)
    public int[] twoSum(int[] nums, int target){
        HashMap<Integer, Integer> maps = new HashMap<Integer,Integer>();
        for(int i = 0; i < nums.length; i++){
            int complement = target - nums[i];
            if(maps.containsKey(complement)){
                return new int[] {maps.get(complement),i};
            }
            else
                maps.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }

}
