Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Link: https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array
/******************************************************************************************/
package LeetCode;

public class SearchRange {

	public int[] solution(int[] nums, int target) {
		int[] range = {-1,-1};
		if(nums == null || nums.length < 1)
			return range;
		
		
		int left = 0, right = nums.length-1;
		int mid;
		int leftborder, rightborder;
		
		int[] borders = locate(nums, left, right, target);
		left=borders[0];right=borders[1];mid=borders[2];
		
		if (mid != -1) {
			leftborder = left_binary_search(nums, left, mid, target);
			rightborder = right_binary_search(nums, mid, right, target);
			range[0]=leftborder;
			range[1]=rightborder;
		}
	
		return range;
	}
	
	private int[] locate(int[] nums, int left, int right, int target) {
		int mid = (left+right+1)>>1;
		int val = -1;
		while(left<=right) {
			if(nums[mid]==target) {
				val = mid;
				break;
			}
			else if(nums[mid]<target) {
				left=mid+1;
				mid=(left+right+1)>>1;
			}
			else if(nums[mid]>target) {
				right=mid-1;
				mid=(left+right+1)>>1;
			}			
		}
		//val=(nums[left]==target)?left:val;
		int[] borders = {left,right,val};
		return borders;
	}
	
	private int left_binary_search(int[] nums, int left, int right, int target) {
		int mid = (left+right+1)>>1;
		int val = right;
		
		while(left<=right) {
			if(nums[mid]<target) {
				left=mid;
				mid=(left+right+1)>>1;
			}
			else {
				if(mid>0&&nums[mid-1]==target) {
					right=mid-1;
					mid=(left+right+1)>>1;
				}
				else if(mid>0&&nums[mid-1]!=target) {
					val = mid;
					break;
				}
				else if(mid==0)
					return 0;
			}
		}
		return val;
	}
	
	private int right_binary_search(int[] nums, int left, int right, int target) {
		int mid = (left+right+1)>>1;
		int val = left;
		
		while(left<=right) {
			if(nums[mid]>target) {
				right=mid-1;
				mid=(left+right+1)>>1;
			}
			else {
				if(mid+1<nums.length&&nums[mid+1]==target) {
					left=mid+1;
					mid=(left+right+1)>>1;
				}
				else if (mid+1<nums.length&&nums[mid+1]!=target) {
					val = mid;
					break;
				}
				else if (mid+1==nums.length) {
					val = mid;
					break;
				}		
			}
		}
		return val;
	}
	
	public static void main(String[] args) {
		int[] nums = {1,1,1,1,2,4,4,5,5,5};
		int target = 3;
		
		int[] range = new SearchRange().solution(nums, target);
		System.out.println("["+String.valueOf(range[0])+","+String.valueOf(range[1]+"]"));

	}

}
