Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"

Link: https://leetcode-cn.com/problems/longest-palindromic-substring
/*************************************************************************/

class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<=3) {
    		if(judgePalindrome(s)) {return s;}
    		else {
    	    	if(s.length() == 1)
    	    		return s;
    	    	else if (s == null || s.length() == 0)
    	    		return "";
    	    	else if (s.length() == 2)
    	    		return (s.charAt(0) == s.charAt(1))?s:s.substring(0, 1);
            else{
                if(judgePalindrome(s.substring(0, 2))) {return s.substring(0, 2);}
                if(judgePalindrome(s.substring(1, 3))) {return s.substring(1, 3);}
            }
    		}    		
    	}

    	
    	int i = 1;
    	int j = 0;//used for expanding the single side of length
    	int k = 0;//used for recording the longest single side of the length, currently
    	int n = s.length();
    	int m = 1;//index of the center of the palindrome
    	int h = 0;//used for recording whether even
    	while(i < n - 1) {
    		int isEven = (s.charAt(i) == s.charAt(i+1)) ? 1:0; 
    		if(isEven == 1) {//means it has two centries
        		while(i-j>=0 && i+j+isEven<n) {
        			String sub = s.substring(i-j, i+isEven+j+1);
        			boolean isPalindrome = judgePalindrome(sub);
        			if(isPalindrome == true) {
        				if (j>k || ((j == k) && isEven == 1)) {
        					m = i;
        					h = 1;
        					k = j;
        				}
        			}
        			j++;
        		}
        		j = k;
    		}
			while(i-j>=0 && i+j<n) {
				String sub = s.substring(i-j, i+j+1);
				boolean isPalindrome = judgePalindrome(sub);
    			if(isPalindrome == true) {
    				if (j>k) {
    					m = i;
    					h = 0;
    					k = j;
    				}
    			}
    			j++;
			}
			j=k;    		
    		i++;
    	}    
    	return s.substring(m-k, m+h+k+1);
    }

    private boolean judgePalindrome(String s) {
    	int n = s.length();
    	boolean isEven = (n%2 == 0);
    	String str1, str2;
    	if(isEven) {
    		str1 = s.substring(0, n/2);
    		str2 = new StringBuffer(s.substring(n/2, n)).reverse().toString();
    		
    	}
    	else {
    		str1 = s.substring(0, n/2);
    		str2 = new StringBuffer(s.substring(n/2+1, n)).reverse().toString();    		
    	}   	
    	return str1.equals(str2);
    }
}
